version: '3.8'

services:
  django:
    build: .
    container_name: django_app
    volumes:
      - .:/app  # Syncs code changes
    ports:
      - "8000:8000"  # Exposes Django on localhost:8000
    environment:
      - DEBUG=True
    depends_on:
      db:
        condition: service_healthy
    command: /app/start.sh
    links:
      - db:db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 5s
      timeout: 5s
      retries: 5
  db:
    image: postgres:15
    container_name: pg_db
    restart: always
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  fe:
    build:
      context: ./fe # Path to frontend code
      dockerfile: Dockerfile

    container_name: fe_app
    ports:
      - "3000:3000"  # Exposes frontend on localhost:3000
    volumes:
      - ./fe:/app  # Syncs frontend code changes
      - node_modules:/app/node_modules
    working_dir: /app
    command: npm run dev # Starts the frontend server (assumes you use npm)
    # stdin_open: true  # Equivalent to -i in docker run
    # tty: true  # Equivalent to -t in docker run
    depends_on:
      django: # Ensures backend is up before starting frontend
        condition: service_healthy
    environment:
      - CHOKIDAR_USEPOLLING=true  # Fix for file-watching issues in Docker
      - HOST=0.0.0.0  # Ensures frontend is accessible from outside the container

volumes:
  postgres_data:
  node_modules:

